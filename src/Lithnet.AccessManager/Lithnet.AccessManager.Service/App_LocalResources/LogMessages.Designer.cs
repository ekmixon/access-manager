//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lithnet.AccessManager.Service.App_LocalResources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class LogMessages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal LogMessages() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Lithnet.AccessManager.Service.App_LocalResources.LogMessages", typeof(LogMessages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Successfully authenticated and mapped directory user
        ///{0}.
        /// </summary>
        internal static string AuthenticatedAndMappedUser {
            get {
                return ResourceManager.GetString("AuthenticatedAndMappedUser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The external authentication provider denied the logon request.
        /// </summary>
        internal static string AuthNAccessDenied {
            get {
                return ResourceManager.GetString("AuthNAccessDenied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred looking up the claim value in the directory {0}:{1}.
        /// </summary>
        internal static string AuthNDirectoryLookupError {
            get {
                return ResourceManager.GetString("AuthNDirectoryLookupError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The authentication provider returned an error.
        /// </summary>
        internal static string AuthNProviderError {
            get {
                return ResourceManager.GetString("AuthNProviderError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an exception processing the response from the external identity provider.
        /// </summary>
        internal static string AuthNResponseProcessingError {
            get {
                return ResourceManager.GetString("AuthNResponseProcessingError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user {0} is not authorized to access the computer {1}..
        /// </summary>
        internal static string AuthorizationFailed {
            get {
                return ResourceManager.GetString("AuthorizationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred during the authorization code flow.
        /// </summary>
        internal static string AuthZCodeFlowError {
            get {
                return ResourceManager.GetString("AuthZCodeFlowError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected error occurred during the authorization process for user {0} requesting {2} access to computer {1}.
        /// </summary>
        internal static string AuthZError {
            get {
                return ResourceManager.GetString("AuthZError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user {0} requested {2} access to computer {1} which was authorized, but one or more audit notification channels failed to deliver the audit response, and were configured to deny access to the password when auditing fails.
        /// </summary>
        internal static string AuthZFailedAuditError {
            get {
                return ResourceManager.GetString("AuthZFailedAuditError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user {0} requested access to computer {1} but does not match any of the reader principals that are allowed access to this computer.
        /// </summary>
        internal static string AuthZFailedNoReaderPrincipalMatch {
            get {
                return ResourceManager.GetString("AuthZFailedNoReaderPrincipalMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when trying to get the BitLocker recovery passwords for computer {0} as requested by user {1}.
        /// </summary>
        internal static string BitLockerKeyAccessError {
            get {
                return ResourceManager.GetString("BitLockerKeyAccessError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User {1} requested access to the BitLocker recovery passwords for computer {0}, but the computer does not have any BitLocker recovery passwords in the directory.
        /// </summary>
        internal static string BitLockerKeysNotPresent {
            get {
                return ResourceManager.GetString("BitLockerKeysNotPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate could not be validated due to an unexpected error
        ///
        ///{0}.
        /// </summary>
        internal static string CertificateAuthNGenericFailure {
            get {
                return ResourceManager.GetString("CertificateAuthNGenericFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate presented by the client could not be validated. Check for prior log messages for additional context. If there are no previous log messages related to this authentication attempt, then ensure the certificate was not self-signed, is issued by a certificate authority trusted by this computer, and contains the client authentication EKU
        ///
        ///{0}.
        /// </summary>
        internal static string CertificateAuthNValidationFailure {
            get {
                return ResourceManager.GetString("CertificateAuthNValidationFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No user claim was found with the type {0}.
        /// </summary>
        internal static string ClaimNotFound {
            get {
                return ResourceManager.GetString("ClaimNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected error occurred while trying to find a computer named {0} in the directory for user {1} requesting {2} access..
        /// </summary>
        internal static string ComputerDiscoveryError {
            get {
                return ResourceManager.GetString("ComputerDiscoveryError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user {0} requested {2} access to computer {1}, but multiple computers matching that name were found in the directory.
        /// </summary>
        internal static string ComputerNameAmbiguous {
            get {
                return ResourceManager.GetString("ComputerNameAmbiguous", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user {0} requested {2} access to computer {1} which was not found in the directory.
        /// </summary>
        internal static string ComputerNotFoundInDirectory {
            get {
                return ResourceManager.GetString("ComputerNotFoundInDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request failed because the information about the authenticated user could not be found.
        /// </summary>
        internal static string IdentityDiscoveryError {
            get {
                return ResourceManager.GetString("IdentityDiscoveryError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when trying to grant JIT access to {0} for user {1}.
        /// </summary>
        internal static string JitError {
            get {
                return ResourceManager.GetString("JitError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when trying to rollback the JIT access for user {0} to computer {1}.
        /// </summary>
        internal static string JitRollbackFailed {
            get {
                return ResourceManager.GetString("JitRollbackFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rolling back JIT access for user {0} to computer {1} due to an exception in the audit process.
        /// </summary>
        internal static string JitRollbackInProgress {
            get {
                return ResourceManager.GetString("JitRollbackInProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when trying to get the password for computer {0} as requested by user {1}.
        /// </summary>
        internal static string LapsPasswordError {
            get {
                return ResourceManager.GetString("LapsPasswordError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when trying to get the password history for computer {0} as requested by user {1}.
        /// </summary>
        internal static string LapsPasswordHistoryError {
            get {
                return ResourceManager.GetString("LapsPasswordHistoryError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The computer {0} requested by {1} did not have a local admin password in the directory.
        /// </summary>
        internal static string NoLapsPassword {
            get {
                return ResourceManager.GetString("NoLapsPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The computer {0} requested by {1} did not have any historical local admin passwords in the directory.
        /// </summary>
        internal static string NoLapsPasswordHistory {
            get {
                return ResourceManager.GetString("NoLapsPasswordHistory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected error occurred during the pre-authorization process for user {0} requesting {2} access to {1}.
        /// </summary>
        internal static string PreAuthZError {
            get {
                return ResourceManager.GetString("PreAuthZError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user {0} on IP {1} has exceeded the maximum allowed number of requests per IP ({2} per {3} seconds). The user requested {4} access to {5}..
        /// </summary>
        internal static string RateLimitExceededIP {
            get {
                return ResourceManager.GetString("RateLimitExceededIP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user {0} on IP {1} has exceeded the maximum allowed number of requests per user ({2} per {3} seconds). The user requested {4} access to {5}..
        /// </summary>
        internal static string RateLimitExceededUser {
            get {
                return ResourceManager.GetString("RateLimitExceededUser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user {0} did not fill out the mandatory request reason field for their {1} access request to {2}.
        /// </summary>
        internal static string ReasonRequired {
            get {
                return ResourceManager.GetString("ReasonRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target rule requires password to change after {0}.
        /// </summary>
        internal static string TargetRuleRequiresPasswordChange {
            get {
                return ResourceManager.GetString("TargetRuleRequiresPasswordChange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unhandled error occurred while processing the request for {0} access to computer {1} for user {2}.
        /// </summary>
        internal static string UnhandledError {
            get {
                return ResourceManager.GetString("UnhandledError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to unknown.
        /// </summary>
        internal static string UnknownComputerPlaceholder {
            get {
                return ResourceManager.GetString("UnknownComputerPlaceholder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} has requested {2} access to computer {1}.
        /// </summary>
        internal static string UserHasRequestedAccessToComputer {
            get {
                return ResourceManager.GetString("UserHasRequestedAccessToComputer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request could not be processed because the authenticated user was not found in the directory. Claim information:
        ///{0}.
        /// </summary>
        internal static string UserNotFoundInDirectory {
            get {
                return ResourceManager.GetString("UserNotFoundInDirectory", resourceCulture);
            }
        }
    }
}
