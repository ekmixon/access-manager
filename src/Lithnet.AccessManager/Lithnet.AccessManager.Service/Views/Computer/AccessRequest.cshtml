@using Lithnet.AccessManager.Server.Configuration;
@using Microsoft.Extensions.Options;

@inject IOptionsSnapshot<UserInterfaceOptions> uiSettings

@{
    ViewBag.Title = UIMessages.HeadingRequestAccess;
}

@model Lithnet.AccessManager.Service.Models.AccessRequestModel


<div class="loading-overlay">
    <div class="loading-content d-flex justify-content-center">
        <div class="spinner-border color-ams-blue" role="status"></div>
        <div class="loading-text">Submitting request...</div>
    </div>
</div>

<div class="form-container">
    <div class="form-content-header">
        @UIMessages.HeadingRequestAccess
    </div>
    @using (Html.BeginForm("AccessRequestComputer", "Computer", FormMethod.Post))
    {
        @if (!string.IsNullOrWhiteSpace(uiSettings.Value.RequestScreenCustomHeading) || !string.IsNullOrWhiteSpace(uiSettings.Value.RequestScreenCustomMessage))
        {
            <section>
                <div class="alert alert-primary">
                    @if (!string.IsNullOrWhiteSpace(uiSettings.Value.RequestScreenCustomHeading))
                    {
                        <h4 class="alert-heading">@uiSettings.Value.RequestScreenCustomHeading</h4>
                    }
                    @if (!string.IsNullOrWhiteSpace(uiSettings.Value.RequestScreenCustomMessage))
                    {
                        <p>@uiSettings.Value.RequestScreenCustomMessage</p>
                    }
                </div>
            </section>
        }

        <section>
            @Html.LabelFor(m => m.ComputerName,$"{UIMessages.ComputerName}*", new { @class = "title"})
            <label class="input">
                <i class="icon-append fa fa-desktop"></i>
                @Html.TextBoxFor(m => m.ComputerName, new {@class = "dataEntry"})
                @Html.ValidationMessageFor(m => m.ComputerName)
            </label>
        </section>

        @if (Model.ShowReason)
        {
            <section>
                @Html.LabelFor(m => m.UserRequestReason, $"{UIMessages.UserReasonPrompt}{(Model.ReasonRequired ? "*" : string.Empty)}", new { @class = "title"})

                <label class="input">
                    @if (Model.ReasonRequired)
                    {
                        @Html.TextAreaFor(m => m.UserRequestReason, new {@class = "dataEntryLarge"})
                    }
                    else
                    {
                        @Html.TextAreaFor(m => m.UserRequestReason, new {@class = "dataEntryLarge"})
                    }

                    @Html.ValidationMessageFor(m => m.UserRequestReason)
                </label>
            </section>
        }

        @if (Model?.FailureReason != null)
        {
            <section>
                <div class="alert alert-danger">
                    @Html.DisplayTextFor(m => m.FailureReason)
                </div>
            </section>
        }

        <footer>
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-primary button-loading-overlay">Next</button>
        </footer>
    }
</div>