<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddDomainGroupMembershipPermissions" xml:space="preserve">
    <value># Add-DomainGroupMembershipPermissions
# 
# This script adds the Access Manager service account to the "Windows Authorization Access Group" and "Access Control Assistance Operators" groups in the specified domain
#
# This script requires membership in the Domain Admins group for the domain where permissions need to be added
#
# Version 1.0

#-------------------------------------------------------------------------
# Do not modify below here
$domain = "{domainDns}"
$serviceAccountSid = "{serviceAccountSid}"

# Get the Windows Authorization Access Group by it's well-known SID "S-1-5-32-560"
$de = new-object "System.DirectoryServices.DirectoryEntry" "LDAP://$domain/&lt;SID=S-1-5-32-560&gt;"
$de.Properties["member"].Add("&lt;SID=$serviceAccountSid&gt;") ## Add our service account as a member
$de.CommitChanges()

# Get the Access Control Assistance Operators group by it's well-known SID "S-1-5-32-560"
$de = new-object "System.DirectoryServices.DirectoryEntry" "LDAP://$domain/&lt;SID=S-1-5-32-579&gt;"
$de.Properties["member"].Add("&lt;SID=$serviceAccountSid&gt;") ## Add our service account as a member
$de.CommitChanges()</value>
  </data>
  <data name="AuditScriptTemplate" xml:space="preserve">
    <value>function Write-AuditLog{
    param(
    [hashtable]$tokens,
    [bool]$isSuccess
)
    Write-Information "We're in PowerShell for auditing!";

    $user = $tokens["{user.MsDsPrincipalName}"]
    $computer = $tokens["{computer.msdsprincipalname}"]
    $result = $tokens["{AuthzResult.ResponseCode}"]
    $accessType = $tokens["{AuthzResult.AccessType}"]

    if ($isSuccess)
    {
        Write-Information "User $user successfully requested $accessType access to $computer";
    }
    else
    {
        Write-Information "User $user was denied $accessType access to $computer with response code $result";
    }
}</value>
  </data>
  <data name="AuthorizationScriptTemplate" xml:space="preserve">
    <value>function Get-AuthorizationResponse{
	param(
	$user,
	$computer
)

	# See https://github.com/lithnet/access-manager/wiki/Authorization-Scripts for help

	Write-Information  "We're in PowerShell!"
	Write-Information "Checking if $($user.MsDsPrincipalName) is allowed access to $($computer.MsDsPrincipalName)"

	# Create an object to hold our authorization decisions
	# Set IsAllowed to true to allow access, or set IsDenied to explicitly deny access, or leave both as false if no decision was made. This will allow other rules to be evaluated.
	$response = [pscustomobject]@{
		IsLocalAdminPasswordAllowed = $false
		IsLocalAdminPasswordDenied = $false
		IsLocalAdminPasswordHistoryAllowed = $false
		IsLocalAdminPasswordHistoryDenied = $false
		IsJitAllowed = $false
		IsJitDenied = $false
		IsBitLockerAllowed = $false
		IsBitLockerDenied = $false
	}

	# Return the authorization response to Access Manager to process
	Write-Output $response;
}</value>
  </data>
  <data name="CreateGmsa" xml:space="preserve">
    <value># Create-GroupManagedServiceAccount
# 
# This script enables the KDS service in the domain if it is not already enabled, and creates a new group-managed service account to use with the Access Manager service
#
# This script requires membership in the Domain Admins group
#
# Version 1.0

#-------------------------------------------------------------------------
# Set the following values as appropriate for your environment
#-------------------------------------------------------------------------

$accountName = "svc-lithnetams"
$description = "Service account for the Lithnet Access Manager Service"

#-------------------------------------------------------------------------
# Do not modify below here
#-------------------------------------------------------------------------

$amsServerName = "{serverName}$"

$kdsCreated = $false;

if ((Get-KdsRootKey )-eq $null)
{
    Add-KdsRootKey -EffectiveImmediately
    $kdsCreated=$true;
}

New-ADServiceAccount -Name $accountName -AccountNotDelegated:$true -Description $description -Enabled:$true -KerberosEncryptionType  "AES256,AES128" -SamAccountName $accountName -RestrictToOutboundAuthenticationOnly
Set-ADServiceAccount -Identity $accountName -PrincipalsAllowedToRetrieveManagedPassword $amsServerName

$serviceAccountName = "$((Get-ADDomain).NetbiosName)\$accountName$"

if ($kdsCreated)
{
    Write-Host "The KDS has been enabled in the domain and the service account has been created" -ForegroundColor Yellow
    Write-Host "You may need to wait up to 10 hours for all domain controllers in the domain to replicate the key before you are able to use the account" -ForegroundColor Yellow
    Write-Host "After this time, use the Access Manager configuration tool to change the service account name to $serviceAccountName and leave the password field blank" -ForegroundColor Yellow
}
else
{
    Write-Host "The service account has been created." -ForegroundColor Yellow
    Write-Host "Use the Access Manager configuration tool to change the service account name to $serviceAccountName and leave the password field blank" -ForegroundColor Yellow
}</value>
  </data>
  <data name="EnablePamFeature" xml:space="preserve">
    <value># Enable-PamFeature
# 
# This script enables the 'Privileged Access Management' optional feature in a forest
#
# This script requires membership in the Domain Admins group of the forest root domain or Enterprise Admins
#
# Version 1.0

#-------------------------------------------------------------------------
# Do not modify below here
#-------------------------------------------------------------------------

Import-Module ActiveDirectory

$ErrorActionPreference = "Stop"
$InformationPreference = "Continue"

$domain = "{domain}"

Get-ADOptionalFeature 'Privileged Access Management Feature' -Server $domain | Enable-ADOptionalFeature -Scope ForestOrConfigurationSet -Target $domain</value>
  </data>
  <data name="GrantAccessManagerPermissions" xml:space="preserve">
    <value># Grant-AccessManagerPermissions
# 
# This script grants permissions for computer objects to write their encrypted password details to the directory, and allows the Lithnet Access Manager service account to read that data
#
# This script requires membership in the Domain Admins group 
#
# Version 1.0


#-------------------------------------------------------------------------
# Set the following values as appropriate for your environment
#-------------------------------------------------------------------------

# Leave this value blank to apply the permissions at the top level of the domain where this script is being run
# Otherwise, specify the OU where permissions should be delegated
$OU = "" 

#-------------------------------------------------------------------------
# Do not modify below here

Import-Module ActiveDirectory

$ErrorActionPreference = "Stop"
$InformationPreference = "Continue"

$rootDSE = Get-ADRootDSE

if ([string]::IsNullOrEmpty($ou))
{
	$ou = $rootDSE.defaultNamingContext
}

$schemaNC = $rootDSE.schemaNamingContext
$computerObjectGuid = New-Object Guid @(,(Get-ADObject -SearchBase $schemaNC -LdapFilter "(&amp;(ldapDisplayName=computer)(objectclass=classSchema))"-Properties "SchemaIDGuid" ).SchemaIDGuid)
$lithnetAdminPasswordGuid = New-Object Guid @(,(Get-ADObject -SearchBase $schemaNC -LdapFilter "(&amp;(ldapDisplayName=lithnetAdminPassword)(objectclass=attributeSchema))"-Properties "SchemaIDGuid" ).SchemaIDGuid)
$lithnetAdminPasswordExpiryGuid = New-Object Guid @(,(Get-ADObject -SearchBase $schemaNC -LdapFilter "(&amp;(ldapDisplayName=lithnetAdminPasswordExpiry)(objectclass=attributeSchema))"-Properties "SchemaIDGuid" ).SchemaIDGuid)
$lithnetAdminPasswordHistoryGuid = New-Object Guid @(,(Get-ADObject -SearchBase $schemaNC -LdapFilter "(&amp;(ldapDisplayName=lithnetAdminPasswordHistory)(objectclass=attributeSchema))"-Properties "SchemaIDGuid" ).SchemaIDGuid)

$selfSid = new-object System.Security.Principal.SecurityIdentifier "S-1-5-10"
$serviceAccountSid = new-object System.Security.Principal.SecurityIdentifier "{serviceAccount}"

$propertyAccessRule1 = new-object "System.DirectoryServices.PropertyAccessRule" $serviceAccountSid, "Allow", "Read", $lithnetAdminPasswordGuid, "Descendents", $computerObjectGuid
$propertyAccessRule2 = new-object "System.DirectoryServices.PropertyAccessRule" $serviceAccountSid, "Allow", "Read", $lithnetAdminPasswordExpiryGuid, "Descendents", $computerObjectGuid
$propertyAccessRule3 = new-object "System.DirectoryServices.PropertyAccessRule" $serviceAccountSid, "Allow", "Read", $lithnetAdminPasswordHistoryGuid, "Descendents", $computerObjectGuid
$propertyAccessRule4 = new-object "System.DirectoryServices.PropertyAccessRule" $serviceAccountSid, "Allow", "Write", $lithnetAdminPasswordExpiryGuid, "Descendents", $computerObjectGuid
$propertyAccessRule5 = new-object "System.DirectoryServices.ActiveDirectoryAccessRule" $serviceAccountSid, "ExtendedRight", "Allow", $lithnetAdminPasswordGuid, "Descendents", $computerObjectGuid
$propertyAccessRule6 = new-object "System.DirectoryServices.ActiveDirectoryAccessRule" $serviceAccountSid, "ExtendedRight", "Allow", $lithnetAdminPasswordHistoryGuid, "Descendents", $computerObjectGuid
$propertyAccessRule7 = new-object "System.DirectoryServices.PropertyAccessRule" $selfSid, "Allow", "Read", $lithnetAdminPasswordGuid, "Descendents", $computerObjectGuid
$propertyAccessRule8 = new-object "System.DirectoryServices.PropertyAccessRule" $selfSid, "Allow", "Read", $lithnetAdminPasswordExpiryGuid, "Descendents", $computerObjectGuid
$propertyAccessRule9 = new-object "System.DirectoryServices.PropertyAccessRule" $selfSid, "Allow", "Read", $lithnetAdminPasswordHistoryGuid, "Descendents", $computerObjectGuid
$propertyAccessRule10 = new-object "System.DirectoryServices.PropertyAccessRule" $selfSid, "Allow", "Write", $lithnetAdminPasswordGuid, "Descendents", $computerObjectGuid
$propertyAccessRule11 = new-object "System.DirectoryServices.PropertyAccessRule" $selfSid, "Allow", "Write", $lithnetAdminPasswordExpiryGuid, "Descendents", $computerObjectGuid
$propertyAccessRule12 = new-object "System.DirectoryServices.PropertyAccessRule" $selfSid, "Allow", "Write", $lithnetAdminPasswordHistoryGuid, "Descendents", $computerObjectGuid
$propertyAccessRule13 = new-object "System.DirectoryServices.ActiveDirectoryAccessRule" $selfSid, "ExtendedRight", "Allow", $lithnetAdminPasswordGuid, "Descendents", $computerObjectGuid
$propertyAccessRule14 = new-object "System.DirectoryServices.ActiveDirectoryAccessRule" $selfSid, "ExtendedRight", "Allow", $lithnetAdminPasswordHistoryGuid, "Descendents", $computerObjectGuid


$path = "AD:\$OU"

$acl = get-acl -Path $path
$acl.AddAccessRule($propertyAccessRule1)
$acl.AddAccessRule($propertyAccessRule2)
$acl.AddAccessRule($propertyAccessRule3)
$acl.AddAccessRule($propertyAccessRule4)
$acl.AddAccessRule($propertyAccessRule5)
$acl.AddAccessRule($propertyAccessRule6)
$acl.AddAccessRule($propertyAccessRule7)
$acl.AddAccessRule($propertyAccessRule8)
$acl.AddAccessRule($propertyAccessRule9)
$acl.AddAccessRule($propertyAccessRule10)
$acl.AddAccessRule($propertyAccessRule11)
$acl.AddAccessRule($propertyAccessRule12)
$acl.AddAccessRule($propertyAccessRule13)
$acl.AddAccessRule($propertyAccessRule14)
set-acl -AclObject $acl -Path $path</value>
  </data>
  <data name="GrantBitLockerRecoveryPasswordPermissions" xml:space="preserve">
    <value># Grant-BitLockerRecoveryPasswordPermissions
# 
# This script grants permissions that allow the Lithnet Admin Access Manager service account to read BitLocker recovery passwords from Active Directory
#
# This script requires membership in the Domain Admins group 
#
# Version 1.0


#-------------------------------------------------------------------------
# Set the following values as appropriate for your environment
#-------------------------------------------------------------------------

# Leave this value blank to apply the permissions at the top level of the domain where this script is being run
# Otherwise, specify the OU where permissions should be delegated
$OU = "" 

#-------------------------------------------------------------------------
# Do not modify below here
#-------------------------------------------------------------------------

Import-Module ActiveDirectory

$ErrorActionPreference = "Stop"
$InformationPreference = "Continue"

$rootDSE = Get-ADRootDSE

if ([string]::IsNullOrEmpty($ou))
{
	$ou = $rootDSE.defaultNamingContext
}

$schemaNC = $rootDSE.schemaNamingContext
$fveRecoveryObjectGuid = New-Object Guid @(,(Get-ADObject -SearchBase $schemaNC -LdapFilter "(&amp;(ldapDisplayName=msFVE-RecoveryInformation)(objectclass=classSchema))"-Properties "SchemaIDGuid" ).SchemaIDGuid)
$fveRecoveryPasswordGuid = New-Object Guid @(,(Get-ADObject -SearchBase $schemaNC -LdapFilter "(&amp;(ldapDisplayName=msFVE-RecoveryPassword)(objectclass=attributeSchema))"-Properties "SchemaIDGuid" ).SchemaIDGuid)

$serviceAccountSid = new-object System.Security.Principal.SecurityIdentifier "{serviceAccount}"

$propertyAccessRule1 = new-object "System.DirectoryServices.ActiveDirectoryAccessRule" $serviceAccountSid, "ReadProperty", "Allow", "Descendents", $fveRecoveryObjectGuid
$propertyAccessRule4 = new-object "System.DirectoryServices.ActiveDirectoryAccessRule" $serviceAccountSid, "ExtendedRight", "Allow", $fveRecoveryPasswordGuid, "Descendents", $fveRecoveryObjectGuid

$path = "AD:\$OU"

$acl = get-acl -Path $path
$acl.AddAccessRule($propertyAccessRule1)
$acl.AddAccessRule($propertyAccessRule2)
$acl.AddAccessRule($propertyAccessRule3)
$acl.AddAccessRule($propertyAccessRule4)

set-acl -AclObject $acl -Path $path</value>
  </data>
  <data name="GrantComputerSelfPermission" xml:space="preserve">
    <value># Grant-ComputerSelfPermission
# 
# This script grants permissions for computer objects to set their own password attributes
#
# This script requires membership in the Domain Admins group 
# 
#
# Version 1.0


#-------------------------------------------------------------------------
# Set the following values as appropriate for your environment
#-------------------------------------------------------------------------

$OU = "OU=Laps Testing,DC=IDMDEV1,DC=LOCAL"

#-------------------------------------------------------------------------
# Do not modify below here

Import-Module ActiveDirectory

$ErrorActionPreference = "Stop"
$InformationPreference = "Continue"

$rootDSE = Get-ADRootDSE
$schemaNC = $rootDSE.schemaNamingContext
$computerObjectGuid = New-Object Guid @(,(Get-ADObject -SearchBase $schemaNC -LdapFilter "(&amp;(ldapDisplayName=computer)(objectclass=classSchema))"-Properties "SchemaIDGuid" ).SchemaIDGuid)
$lithnetAdminPasswordGuid = New-Object Guid @(,(Get-ADObject -SearchBase $schemaNC -LdapFilter "(&amp;(ldapDisplayName=lithnetAdminPassword)(objectclass=attributeSchema))"-Properties "SchemaIDGuid" ).SchemaIDGuid)
$lithnetAdminPasswordExpiryGuid = New-Object Guid @(,(Get-ADObject -SearchBase $schemaNC -LdapFilter "(&amp;(ldapDisplayName=lithnetAdminPasswordExpiry)(objectclass=attributeSchema))"-Properties "SchemaIDGuid" ).SchemaIDGuid)
$lithnetAdminPasswordHistoryGuid = New-Object Guid @(,(Get-ADObject -SearchBase $schemaNC -LdapFilter "(&amp;(ldapDisplayName=lithnetAdminPasswordHistory)(objectclass=attributeSchema))"-Properties "SchemaIDGuid" ).SchemaIDGuid)

$selfSid = new-object System.Security.Principal.SecurityIdentifier "S-1-5-10"

$propertyAccessRule1 = new-object "System.DirectoryServices.PropertyAccessRule" $selfSid, "Allow", "Read", $lithnetAdminPasswordGuid, "Descendents", $computerObjectGuid
$propertyAccessRule2 = new-object "System.DirectoryServices.PropertyAccessRule" $selfSid, "Allow", "Read", $lithnetAdminPasswordExpiryGuid, "Descendents", $computerObjectGuid
$propertyAccessRule3 = new-object "System.DirectoryServices.PropertyAccessRule" $selfSid, "Allow", "Read", $lithnetAdminPasswordHistoryGuid, "Descendents", $computerObjectGuid
$propertyAccessRule4 = new-object "System.DirectoryServices.PropertyAccessRule" $selfSid, "Allow", "Write", $lithnetAdminPasswordGuid, "Descendents", $computerObjectGuid
$propertyAccessRule5 = new-object "System.DirectoryServices.PropertyAccessRule" $selfSid, "Allow", "Write", $lithnetAdminPasswordExpiryGuid, "Descendents", $computerObjectGuid
$propertyAccessRule6 = new-object "System.DirectoryServices.PropertyAccessRule" $selfSid, "Allow", "Write", $lithnetAdminPasswordHistoryGuid, "Descendents", $computerObjectGuid
$propertyAccessRule7 = new-object "System.DirectoryServices.ActiveDirectoryAccessRule" $sid, "ExtendedRight", "Allow", $lithnetAdminPasswordGuid, "Descendents", $computerObjectGuid
$propertyAccessRule8 = new-object "System.DirectoryServices.ActiveDirectoryAccessRule" $sid, "ExtendedRight", "Allow", $lithnetAdminPasswordHistoryGuid, "Descendents", $computerObjectGuid


$path = "AD:\$OU"

$acl = get-acl -Path $path
$acl.AddAccessRule($propertyAccessRule1)
$acl.AddAccessRule($propertyAccessRule2)
$acl.AddAccessRule($propertyAccessRule3)
$acl.AddAccessRule($propertyAccessRule4)
$acl.AddAccessRule($propertyAccessRule5)
$acl.AddAccessRule($propertyAccessRule6)
$acl.AddAccessRule($propertyAccessRule7)
$acl.AddAccessRule($propertyAccessRule8)
set-acl -AclObject $acl -Path $path</value>
  </data>
  <data name="GrantGroupPermissions" xml:space="preserve">
    <value># Grant-GroupPermissions
# 
# This script grants permissions for the AMS service account to create, delete, and manage groups in the specified OU
#
# This script requires membership in the Domain Admins group 
# 
#
# Version 1.0

#-------------------------------------------------------------------------
# Do not modify below here
#-------------------------------------------------------------------------

Import-Module ActiveDirectory

$ErrorActionPreference = "Stop"
$InformationPreference = "Continue"

$domain = "{domain}"
$server = (Get-ADDomainController -DomainName $domain -Discover -ForceDiscover -Writable).HostName[0]

$rootDSE = Get-ADRootDSE -Server $server
$schemaNC = $rootDSE.schemaNamingContext
$groupObjectGuid = New-Object Guid @(,(Get-ADObject -Server $server -SearchBase $schemaNC -LdapFilter "(&amp;(ldapDisplayName=group)(objectclass=classSchema))"-Properties "SchemaIDGuid" ).SchemaIDGuid)

$sid = new-object System.Security.Principal.SecurityIdentifier "{serviceAccount}"
$ou = "{ou}"

$ace1user = new-object System.DirectoryServices.ActiveDirectoryAccessRule $sid, "CreateChild,DeleteChild", "Allow", $groupObjectGuid, "None"
$ace2user = new-object System.DirectoryServices.ActiveDirectoryAccessRule $sid, "GenericAll", "Allow", "Children", $groupObjectGuid
 
if ((Get-PSDrive -Name AD_AMS -ErrorAction SilentlyContinue) -ne $null)
{
    Remove-PSDrive -Name AD_AMS
}

New-PSDrive -Name AD_AMS -PSProvider ActiveDirectory -Server $server -root "//RootDSE/" | out-null

$path = "AD_AMS:\$OU"

$acl = get-acl -Path $path 
$acl.AddAccessRule($ace1user)
$acl.AddAccessRule($ace2user)
set-acl -AclObject $acl -Path $path</value>
  </data>
  <data name="GrantMsLapsPermissions" xml:space="preserve">
    <value># Grant-MsLapsPermissions
# 
# This script grants permissions that allow the Lithnet Admin Access Manager service account to read the Microsoft LAPS passwords from Active Directory
#
# This script requires membership in the Domain Admins group 
#
# Version 1.0


#-------------------------------------------------------------------------
# Set the following values as appropriate for your environment
#-------------------------------------------------------------------------

# Leave this value blank to apply the permissions at the top level of the domain where this script is being run
# Otherwise, specify the OU where permissions should be delegated
$OU = "" 

#-------------------------------------------------------------------------
# Do not modify below here

Import-Module ActiveDirectory

$ErrorActionPreference = "Stop"
$InformationPreference = "Continue"

$rootDSE = Get-ADRootDSE

if ([string]::IsNullOrEmpty($ou))
{
	$ou = $rootDSE.defaultNamingContext
}

$schemaNC = $rootDSE.schemaNamingContext
$computerObjectGuid = New-Object Guid @(,(Get-ADObject -SearchBase $schemaNC -LdapFilter "(&amp;(ldapDisplayName=computer)(objectclass=classSchema))"-Properties "SchemaIDGuid" ).SchemaIDGuid)
$msLapsPasswordGuid = New-Object Guid @(,(Get-ADObject -SearchBase $schemaNC -LdapFilter "(&amp;(ldapDisplayName=ms-Mcs-AdmPwd)(objectclass=attributeSchema))"-Properties "SchemaIDGuid" ).SchemaIDGuid)
$msLapsPasswordExpiryGuid = New-Object Guid @(,(Get-ADObject -SearchBase $schemaNC -LdapFilter "(&amp;(ldapDisplayName=ms-Mcs-AdmPwdExpirationTime)(objectclass=attributeSchema))"-Properties "SchemaIDGuid" ).SchemaIDGuid)

$serviceAccountSid = new-object System.Security.Principal.SecurityIdentifier "{serviceAccount}"

$propertyAccessRule1 = new-object "System.DirectoryServices.PropertyAccessRule" $serviceAccountSid, "Allow", "Read", $msLapsPasswordGuid, "Descendents", $computerObjectGuid
$propertyAccessRule2 = new-object "System.DirectoryServices.PropertyAccessRule" $serviceAccountSid, "Allow", "Read", $msLapsPasswordExpiryGuid, "Descendents", $computerObjectGuid
$propertyAccessRule3 = new-object "System.DirectoryServices.PropertyAccessRule" $serviceAccountSid, "Allow", "Write", $msLapsPasswordExpiryGuid, "Descendents", $computerObjectGuid
$propertyAccessRule4 = new-object "System.DirectoryServices.ActiveDirectoryAccessRule" $serviceAccountSid, "ExtendedRight", "Allow", $msLapsPasswordGuid, "Descendents", $computerObjectGuid

$path = "AD:\$OU"

$acl = get-acl -Path $path
$acl.AddAccessRule($propertyAccessRule1)
$acl.AddAccessRule($propertyAccessRule2)
$acl.AddAccessRule($propertyAccessRule3)
$acl.AddAccessRule($propertyAccessRule4)

set-acl -AclObject $acl -Path $path</value>
  </data>
  <data name="GrantServiceAccountPermission" xml:space="preserve">
    <value># Grant-ServiceAccountPermission
# 
# This script grants permissions for a user or group to read the admin password values, as well as trigger a password reset by cleaning the password expiry field
#
# This script requires membership in the Domain Admins group 
# 
#
# Version 1.0


#-------------------------------------------------------------------------
# Set the following values as appropriate for your environment
#-------------------------------------------------------------------------

$OU = "OU=Laps Testing,DC=IDMDEV1,DC=LOCAL"
$userOrGroup = "IDMDEV1\Domain Admins"

#-------------------------------------------------------------------------
# Do not modify below here

Import-Module ActiveDirectory

$ErrorActionPreference = "Stop"
$InformationPreference = "Continue"

$rootDSE = Get-ADRootDSE
$schemaNC = $rootDSE.schemaNamingContext
$computerObjectGuid = New-Object Guid @(,(Get-ADObject -SearchBase $schemaNC -LdapFilter "(&amp;(ldapDisplayName=computer)(objectclass=classSchema))"-Properties "SchemaIDGuid" ).SchemaIDGuid)
$lithnetAdminPasswordGuid = New-Object Guid @(,(Get-ADObject -SearchBase $schemaNC -LdapFilter "(&amp;(ldapDisplayName=lithnetAdminPassword)(objectclass=attributeSchema))"-Properties "SchemaIDGuid" ).SchemaIDGuid)
$lithnetAdminPasswordExpiryGuid = New-Object Guid @(,(Get-ADObject -SearchBase $schemaNC -LdapFilter "(&amp;(ldapDisplayName=lithnetAdminPasswordExpiry)(objectclass=attributeSchema))"-Properties "SchemaIDGuid" ).SchemaIDGuid)
$lithnetAdminPasswordHistoryGuid = New-Object Guid @(,(Get-ADObject -SearchBase $schemaNC -LdapFilter "(&amp;(ldapDisplayName=lithnetAdminPasswordHistory)(objectclass=attributeSchema))"-Properties "SchemaIDGuid" ).SchemaIDGuid)

$objUser = New-Object System.Security.Principal.NTAccount($userOrGroup)
$sid = $objUser.Translate([System.Security.Principal.SecurityIdentifier])

$propertyAccessRule1 = new-object "System.DirectoryServices.PropertyAccessRule" $sid, "Allow", "Read", $lithnetAdminPasswordGuid, "Descendents", $computerObjectGuid
$propertyAccessRule2 = new-object "System.DirectoryServices.PropertyAccessRule" $sid, "Allow", "Read", $lithnetAdminPasswordExpiryGuid, "Descendents", $computerObjectGuid
$propertyAccessRule3 = new-object "System.DirectoryServices.PropertyAccessRule" $sid, "Allow", "Read", $lithnetAdminPasswordHistoryGuid, "Descendents", $computerObjectGuid
$propertyAccessRule4 = new-object "System.DirectoryServices.PropertyAccessRule" $sid, "Allow", "Write", $lithnetAdminPasswordExpiryGuid, "Descendents", $computerObjectGuid
$propertyAccessRule5 = new-object "System.DirectoryServices.ActiveDirectoryAccessRule" $sid, "ExtendedRight", "Allow", $lithnetAdminPasswordGuid, "Descendents", $computerObjectGuid
$propertyAccessRule6 = new-object "System.DirectoryServices.ActiveDirectoryAccessRule" $sid, "ExtendedRight", "Allow", $lithnetAdminPasswordHistoryGuid, "Descendents", $computerObjectGuid

$path = "AD:\$OU"

$acl = get-acl -Path $path
$acl.AddAccessRule($propertyAccessRule1)
$acl.AddAccessRule($propertyAccessRule2)
$acl.AddAccessRule($propertyAccessRule3)
$acl.AddAccessRule($propertyAccessRule4)
$acl.AddAccessRule($propertyAccessRule5)
$acl.AddAccessRule($propertyAccessRule6)
set-acl -AclObject $acl -Path $path</value>
  </data>
  <data name="PreventDelegation" xml:space="preserve">
    <value># Prevent-Delegation
# 
# This script modifies the userAccountControl attribute to set the flag that prevents delegation of the specified account
#
# This script requires membership in the domain admins group, or delegated permission to manage user objects in the container where the account resides
# 
#
# Version 1.0

$ErrorActionPreference = "Stop"
$InformationPreference = "Continue"

Import-Module ActiveDirectory
    
$sid = "{sid}"            
Set-ADAccountControl -Identity $sid -AccountNotDelegated:$true</value>
  </data>
  <data name="PublishCertificateTemplate" xml:space="preserve">
    <value># Publish-LithnetAccessManagerCertificate
# 
# This script creates an object in the Configuration Naming context of the root domain in the forest with a copy
# that contains the public key of the certificate Lithnet Access Manager Agents should use to encrypt their local
# admin passwords and password history
#
# This script requires membership in their the Enterprise Admin group, or the Domain Admin group on the root domain of the forest
# 
# Note, this script has been pre-populated with the information required to publish the certificate in your forest
#
# Version 1.0

Import-Module ActiveDirectory

$ErrorActionPreference = "Stop"
$InformationPreference = "Continue"
$object = $null;
$lithnetContainerName = "Lithnet"
$publicKeyObjectName = "AccessManagerConfig";
$servicesContainerDN = "CN=Services,{configurationNamingContext}";
$lithnetContainerDN = "CN=$lithnetContainerName,$servicesContainerDN";
$keyContainerDN = "CN=$publicKeyObjectName,$lithnetContainerDN";
$forest = "{forest}"
$server = (Get-ADDomainController -DomainName $forest -Discover -ForceDiscover -Writable).HostName[0]

$certificateContent = @"
{certificateData}
"@;


$cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
$certBytes = [System.Convert]::FromBase64String($certificateContent);

try
{
    Write-Information "Attempting to get container $lithnetContainerDN";
    $object = Get-ADObject $lithnetContainerDN -Server $server;
    Write-Information "Found container in directory $lithnetContainerDN";
}
catch [Microsoft.ActiveDirectory.Management.ADIdentityNotFoundException]
{
    Write-Warning "$lithnetContainerDN doesn't exist. Creating"
    New-ADObject -Name $lithnetContainerName -Path $servicesContainerDN -Type "container" -Server $server
    Write-Information "Created container $keyContainerDN";
}

try
{
    Write-Information "Attempting to get public key container $keyContainerDN";
    $object = Get-ADObject $keyContainerDN -Server $server;
    Write-Information "Found public key container $keyContainerDN";
    Set-ADObject -Identity $keyContainerDN -Replace @{"caCertificate"=$certBytes} -Server $server
    Write-Information "Successfully published certificate to directory";
}
catch [Microsoft.ActiveDirectory.Management.ADIdentityNotFoundException]
{
    Write-Warning "$publicKeyObjectName doesn't exist. Creating"
    New-ADObject -Name $publicKeyObjectName -Path $lithnetContainerDN -Type "lithnetAccessManagerConfig" -OtherAttributes @{"appSchemaVersion"="1"; "caCertificate"=$certBytes} -Server $server
    Write-Information "Created Public key container $keyContainerDN";
}</value>
  </data>
  <data name="UpdateAdSchemaTemplate" xml:space="preserve">
    <value># Update-AdSchema
# 
# This script creates the attributes and object classes required to enable encrypted local admin passwords and password history support
# with the Lithnet Access Manager Agent
#
# This script requires membership in their the Schema Admin group
# 
#
# Version 1.0
$ErrorActionPreference = "Stop"
$InformationPreference = "Continue"

Import-Module ActiveDirectory

$forest = "{forest}"
$server = (Get-ADDomainController -DomainName $forest -Discover -ForceDiscover -Writable).HostName[0]
$rootDSE = Get-ADRootDSE -Server $server
$schemaNC = $rootDSE.schemaNamingContext
$schemaMaster = Get-ADObject $schemaNC -Properties fSMORoleOwner -server $server | Get-ADDomainController -Identity { $_.fSMORoleOwner } -Server $server
$schemaMasterRootDse = [ADSI]::new("LDAP://$($schemaMaster.HostName)/RootDSE")

if (-not (Get-ADObject -SearchBase $schemaNC -Server $schemaMaster.HostName -LdapFilter "(&amp;(ldapDisplayName=lithnetAdminPassword)(objectclass=attributeSchema))"))
{
    New-ADObject -Name "Lithnet-Admin-Password" -Type "attributeSchema" -Path $schemaNC -Server $schemaMaster.HostName -OtherAttributes @{
        schemaIDGUID                  = [Guid]::new("f440de15-5e53-4522-a221-0000b9d757dd").ToByteArray()
        attributeID                   = "1.3.6.1.4.1.55989.1.1.1"
        lDAPDisplayName               = "lithnetAdminPassword"
        adminDisplayName              = "lithnetAdminPassword"
        attributeSyntax               = "2.5.5.12"
        oMSyntax                      = 64
        searchFlags                   = 904
        isSingleValued                = $true
        isMemberOfPartialAttributeSet = $false
        systemOnly                    = $false
        showInAdvancedViewOnly        = $false
    } 

    Write-Host "The attribute lithnetAdminPassword was created"
}
else
{
    Write-Host "The attribute lithnetAdminPassword already exists"
}

if (-not (Get-ADObject -SearchBase $schemaNC -Server $schemaMaster.HostName -LdapFilter "(&amp;(ldapDisplayName=lithnetAdminPasswordHistory)(objectclass=attributeSchema))"))
{
    New-ADObject -Name "Lithnet-Admin-Password-History" -Type "attributeSchema" -Path $schemaNC -Server $schemaMaster.HostName -OtherAttributes @{
        schemaIDGUID                  = [Guid]::new("5e7f84e2-9561-4ac3-b3b4-0000121aa663").ToByteArray()
        attributeID                   = "1.3.6.1.4.1.55989.1.1.2"
        lDAPDisplayName               = "lithnetAdminPasswordHistory"
        adminDisplayName              = "lithnetAdminPasswordHistory"
        attributeSyntax               = "2.5.5.12"
        oMSyntax                      = 64
        searchFlags                   = 904
        isSingleValued                = $false
        isMemberOfPartialAttributeSet = $false
        systemOnly                    = $false
        showInAdvancedViewOnly        = $false
    }

    Write-Host "The attribute lithnetAdminPasswordHistory was created"
}
else
{
    Write-Host "The attribute lithnetAdminPasswordHistory already exists"
}

if (-not (Get-ADObject -SearchBase $schemaNC -Server $schemaMaster.HostName -LdapFilter "(&amp;(ldapDisplayName=lithnetAdminPasswordExpiry)(objectclass=attributeSchema))"))
{
    New-ADObject -Name "Lithnet-Admin-Password-Expiry" -Type "attributeSchema" -Path $schemaNC -Server $schemaMaster.HostName -OtherAttributes @{
        schemaIDGUID                  = [Guid]::new("0f65f007-22e9-4a4f-9fba-000025aa156d").ToByteArray()
        attributeID                   = "1.3.6.1.4.1.55989.1.1.3"
        lDAPDisplayName               = "lithnetAdminPasswordExpiry"
        adminDisplayName              = "lithnetAdminPasswordExpiry"
        attributeSyntax               = "2.5.5.16"
        oMSyntax                      = 65
        searchFlags                   = 0
        isSingleValued                = $true
        isMemberOfPartialAttributeSet = $false
        systemOnly                    = $false
        showInAdvancedViewOnly        = $false
    }

    Write-Host "The attribute lithnetAdminPasswordExpiry was created"
}
else
{
    Write-Host "The attribute lithnetAdminPasswordExpiry already exists"
}

$schemaMasterRootDse.Put("schemaUpdateNow", 1)
$schemaMasterRootDse.SetInfo()

$computerClass = Get-ADObject -SearchBase $schemaNC -Server $schemaMaster.HostName -LdapFilter "(&amp;(ldapDisplayName=computer)(objectclass=classSchema))" 
$computerClass | Set-ADObject -Server $schemaMaster.HostName -Add @{ mayContain = @("lithnetAdminPassword" , "lithnetAdminPasswordHistory", "lithnetAdminPasswordExpiry") } 

$schemaMasterRootDse.Put("schemaUpdateNow", 1)
$schemaMasterRootDse.SetInfo()

if (-not (Get-ADObject -SearchBase $schemaNC -Server $schemaMaster.HostName -LdapFilter "(&amp;(ldapDisplayName=lithnetAccessManagerConfig)(objectclass=classSchema))"))
{
    New-ADObject -Name "Lithnet-Access-Manager-Configuration" -Type "classSchema" -Path $schemaNC -Server $schemaMaster.HostName -OtherAttributes @{
        schemaIDGUID                  = [Guid]::new("2c6a6a6a-6f3f-407e-81c7-b7807b369368").ToByteArray()
        governsID                     = "1.3.6.1.4.1.55989.1.2.1"
        lDAPDisplayName               = "lithnetAccessManagerConfig"
        adminDisplayName              = "lithnetAccessManagerConfig"
        objectClassCategory           = 1
        subclassOf                    = "applicationSettings"
        rdnAttId                      = "cn"
        possSuperiors                 = "container"
        mayContain                    = @("cn", "keywords", "caCertificate", "msDS-ByteArray", "msDS-DateTime", "msDS-Settings", "msDS-Integer", "msDS-ObjectReference", "appSchemaVersion")
    }

    Write-Host "The object class lithnetAccessManagerConfig was created"
}
else
{
    Write-Host "The object class lithnetAccessManagerConfig already exists"
}

$schemaMasterRootDse.Put("schemaUpdateNow", 1)
$schemaMasterRootDse.SetInfo()</value>
  </data>
</root>