<UserControl x:Class="Lithnet.AccessManager.Server.UI.LapsConfigurationView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:local="clr-namespace:Lithnet.AccessManager.Server.UI"
             xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:s="https://github.com/canton7/Stylet"
             xmlns:dialog="clr-namespace:MahApps.Metro.Controls.Dialogs;assembly=MahApps.Metro"
             xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
             dialog:DialogParticipation.Register="{Binding}"
             mc:Ignorable="d" 
             d:DesignWidth="800"
             Margin="5">
    <StackPanel>
        <DockPanel>
            <Button DockPanel.Dock="Right" Margin="5" Click="{s:Action Help}" Background="Transparent" BorderThickness="0" Focusable="False" >
                <iconPacks:PackIconMaterialLight Kind="HelpCircle" />
            </Button>
            <Label DockPanel.Dock="Left" Style="{DynamicResource DescriptionHeaderStyle}" Content="Microsoft LAPS agent" />
        </DockPanel>
        
        <Label Style="{DynamicResource SubDescriptionHeaderStyle}" 
               Content="Permissions"/>

        <Grid Margin="5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="150"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <TextBlock Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2"
                           Margin="5"
                           TextWrapping="Wrap"
                           Text="The Lithnet Access Manager Service (AMS) can read Microsoft LAPS passwords from Active Directory. There is no configuration you need to make to support this, other than delegating permission to the service account. You can use the standard Microsoft-provided cmdlets to do this, or use the PowerShell script provided below."/>

            <Button Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2"
                        Command="{s:Action DelegateMsLapsPermission}"
                        Margin="5" 
                        HorizontalAlignment="Left"
                        VerticalContentAlignment="Center">
                <StackPanel Orientation="Horizontal" 
                                VerticalAlignment="Center">
                    <iconPacks:PackIconMaterial Kind="ScriptOutline" Margin="0 0 2 0"/>
                    <TextBlock Text="DELEGATE MICROSOFT LAPS PERMISSIONS..." VerticalAlignment="Center"/>
                </StackPanel>
            </Button>


            <TextBlock Grid.Row="1" Grid.Column="1" 
                           VerticalAlignment="Center"
                           HorizontalAlignment="Right"
                           Margin="5">
                    <Hyperlink Click="{s:Action OpenMsLapsDownload}">Download Microsoft LAPS</Hyperlink>
            </TextBlock>
        </Grid>

        <Label Style="{DynamicResource DescriptionHeaderStyle}" 
               Content="Lithnet Access Manager agent"/>
        <Label Style="{DynamicResource SubDescriptionHeaderStyle}" 
               Content="Permissions"/>
        <Grid Margin="5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="150"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>


            <TextBlock Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3"
                           TextWrapping="Wrap"
                           Text="If you plan to use the Lithnet Access Manager Agent (AMA) to generate local admin passwords, then you must set specific permissions on the OUs that contain computers where AMA will be installed. Use the following script to assign access for computers to write their encrypted password data and history to the directory, and to allow the Lithnet Access Manager Service (AMS) account to read that data"
                           Margin="5"/>

            <Button Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2"
                        Command="{s:Action DelegateServicePermission}"
                        Margin="5" 
                        HorizontalAlignment="Left"
                        VerticalContentAlignment="Center">
                <StackPanel Orientation="Horizontal" 
                                VerticalAlignment="Center">
                    <iconPacks:PackIconMaterial Kind="ScriptOutline" Margin="0 0 2 0"/>
                    <TextBlock Text="DELEGATE LITHNET AMA PERMISSIONS..." VerticalAlignment="Center"/>
                </StackPanel>
            </Button>

            <TextBlock Grid.Row="1" Grid.Column="2" 
                           VerticalAlignment="Center"
                           Margin="5">
                    <Hyperlink Click="{s:Action OpenAccessManagerAgentDownload}">Download Lithnet Access Manager Agent</Hyperlink>
            </TextBlock>

        </Grid>

        <Label Style="{DynamicResource SubDescriptionHeaderStyle}" 
               Content="Encryption"/>

        <Grid Margin="5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="150"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <TextBlock Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3"
                           TextWrapping="Wrap"
                           Text="Local admin passwords generated the AMA are always encrypted before they are stored in the directory. You need to ensure each forest has an encryption certificate generated and published so the agent can find it. The public key is published to Active Directory, while the private key remains on this server. "
                           Margin="5"/>

            <TextBlock Grid.Row="2" Grid.Column="0" 
                   Text="Forest"
                   Margin="5"/>
            <ComboBox Grid.Row="2" Grid.Column="1" 
                  ItemsSource="{Binding Forests, Mode=OneWay}"
                  SelectedItem="{Binding SelectedForest}"
                  DisplayMemberPath="Name"
                  Margin="5"/>

            <TextBlock Grid.Row="3" Grid.Column="0"
                           Text="Password encryption certificates"
                           TextWrapping="Wrap"
                           Margin="5"/>

            <ListView Grid.Row="3" Grid.Column="1"
                                      BorderBrush="{StaticResource MahApps.Brushes.Control.Border}" BorderThickness="1"
                                      ItemsSource="{Binding AvailableCertificates}"
                                      SelectedItem="{Binding SelectedCertificate}"
                                      ScrollViewer.VerticalScrollBarVisibility="Auto" 
                                      MinHeight="75"
                                      MaxHeight="200"
                                      Margin="5">
                <ListView.Resources>
                    <DataTemplate x:Key="PublishedIconTemplate">
                        <iconPacks:PackIconFontAwesome Kind="CheckSolid"
                                                   Foreground="DarkGreen" 
                                                   Visibility="{Binding IsPublished, Converter={StaticResource BooleanToVisibilityConverter}}"
                                                   VerticalAlignment="Center"/>
                    </DataTemplate>
                    <DataTemplate x:Key="PrivateKeyIconTemplate">
                        <StackPanel Orientation="Horizontal">
                            <iconPacks:PackIconFontAwesome Kind="CheckSolid"
                                                   Foreground="DarkGreen" 
                                                   Visibility="{Binding HasPrivateKey, Converter={StaticResource BooleanToVisibilityConverter}}"
                                                   VerticalAlignment="Center"/>
                            <iconPacks:PackIconFontAwesome Kind="TimesCircleRegular" 
                                                   Foreground="DarkRed" 
                                                   Visibility="{Binding HasNoPrivateKey, Converter={StaticResource BooleanToVisibilityConverter}}"
                                                   VerticalAlignment="Center"/>
                        </StackPanel>
                    </DataTemplate>
                    <DataTemplate x:Key="HasPermissionIconTemplate">
                        <StackPanel Orientation="Horizontal">
                            <iconPacks:PackIconFontAwesome Kind="CheckSolid"
                                                           Foreground="DarkGreen" 
                                                           Visibility="{Binding HasPermission, Converter={StaticResource BooleanToVisibilityConverter}}"
                                                           VerticalAlignment="Center"/>
                            <iconPacks:PackIconFontAwesome Kind="TimesCircleRegular" 
                                                           Foreground="DarkRed" 
                                                           Visibility="{Binding HasNoPermission, Converter={StaticResource BooleanToVisibilityConverter}}"
                                                           VerticalAlignment="Center"/>
                            <iconPacks:PackIconTypicons Kind="WarningOutline" 
                                                           Foreground="DarkOrange" 
                                                           Visibility="{Binding HasPermissionError, Converter={StaticResource BooleanToVisibilityConverter}}"
                                                           VerticalAlignment="Center"/>
                            <Label Content="{Binding PermissionError}"/>
                        </StackPanel>
                    </DataTemplate>
                </ListView.Resources>
                <ListView.View>
                    <GridView>
                        <GridViewColumn Header="Subject" 
                                            DisplayMemberBinding="{Binding Subject}" 
                                            Width="Auto"/>
                        <GridViewColumn Header="Issued"
                                            DisplayMemberBinding="{Binding NotBefore}" 
                                            Width="Auto"/>
                        <GridViewColumn Header="Expiry"
                                            DisplayMemberBinding="{Binding NotAfter}" 
                                            Width="Auto"/>
                        <GridViewColumn Header="Published"
                                            CellTemplate="{StaticResource PublishedIconTemplate}"
                                            Width="Auto"/>
                        <GridViewColumn Header="Has Private Key"
                                    CellTemplate="{StaticResource PrivateKeyIconTemplate}"
                                    Width="Auto"/>
                        <GridViewColumn Header="Private key permission"
                                        CellTemplate="{StaticResource HasPermissionIconTemplate}"
                                        Width="Auto"/>
                    </GridView>
                </ListView.View>
            </ListView>

            <StackPanel Grid.Row="3" Grid.Column="2"
                            Orientation="Vertical">
                <Button Command="{s:Action ShowCertificateDialog}"
                            Content="View certificate..."
                            Height="Auto"
                            VerticalAlignment="Bottom"
                            Margin="5"/>
                <Button Command="{s:Action PublishSelectedCertificate}"
                    Margin="5" 
                    VerticalContentAlignment="Center">
                    <StackPanel Orientation="Horizontal" 
                            VerticalAlignment="Center">
                        <iconPacks:PackIconMaterial Kind="ScriptOutline" Margin="0 0 2 0"/>
                        <TextBlock Text="PUBLISH..." VerticalAlignment="Center"/>
                    </StackPanel>
                </Button>

                <Button Command="{s:Action GenerateEncryptionCertificate}"
                            Content="Generate new..."
                            Margin="5"/>


                <Button Command="{s:Action Repermission}"
                        Content="Reset permission..."
                        Margin="5"/>
            </StackPanel>

        </Grid>
    </StackPanel>
</UserControl>
